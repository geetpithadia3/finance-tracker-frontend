name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: DevCluster
  ECS_SERVICE: finance-tracker-service
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: frontend
  SUBNET_ID: subnet-009aa3f58ff8e8689        # Replace with your subnet ID
  SECURITY_GROUP_ID: sg-0ef8c51a9e2a25aed    # Replace with your security group ID

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/geetpithadia3/finance-tracker-frontend:${{ github.sha }}
            ghcr.io/geetpithadia3/finance-tracker-frontend:main

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ghcr.io/geetpithadia3/finance-tracker-frontend:${{ github.sha }}

      - name: Register the task definition
        id: register-task-def
        run: |
          echo "Registering task definition..."
          aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }}

      - name: Output registered task definition
        run: echo "Registered Task Definition: ${{ steps.register-task-def.outputs.task-definition-arn }}"

      - name: Output task definition
        run: |
          echo "Task Definition: ${{ steps.task-def.outputs.task-definition }}"

      - name: Check if ECS service exists
        id: check-service
        run: |
          if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} | grep -q "MISSING"; then
            echo "service_exists=false" >> $GITHUB_OUTPUT
          else
            echo "service_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Create ECS service if it doesn't exist
        if: steps.check-service.outputs.service_exists == 'false'
        run: |
          echo "Creating ECS service with task definition: ${{ steps.register-task-def.outputs.task-definition-arn }}"
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
            --desired-count 1 \
            --launch-type EC2 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_ID }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}]}" \
            --scheduling-strategy REPLICA

      - name: Update existing service
        if: steps.check-service.outputs.service_exists == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true